// <auto-generated />
using System;
using CurvaHagz.Data.App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurvaHagz.Data.App.Migrations
{
    [DbContext(typeof(CurvaHagzContext))]
    [Migration("20250511152235_1st")]
    partial class _1st
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurvaHagz.Models.App.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositPaid")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<decimal>("Refund")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SplitPayment")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("BookingId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.BookingParticipants", b =>
                {
                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("BookingID", "PlayerID");

                    b.HasIndex("PlayerID");

                    b.ToTable("BookingParticipants");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Challenge", b =>
                {
                    b.Property<int>("ChallangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallangeID"));

                    b.Property<int>("ChallengerTeamID")
                        .HasColumnType("int");

                    b.Property<int>("OpponentTeamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Scheduled_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ChallangeID");

                    b.HasIndex("ChallengerTeamID");

                    b.HasIndex("OpponentTeamID");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Chat", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("CurrentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CurrentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MediaURL")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MediaId");

                    b.HasIndex("UserId");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsRead")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.OwnerPaymentInfo", b =>
                {
                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<string>("VisaNumber")
                        .HasColumnType("varchar(25)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("OwnerID", "VisaNumber");

                    b.ToTable("ownerPaymentInfos");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlayGround", b =>
                {
                    b.Property<int>("PlaygroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaygroundId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AvailableForWomen")
                        .HasColumnType("int");

                    b.Property<int>("CancelationPolicy")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<TimeSpan>("ClosingHour")
                        .HasColumnType("time(0)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("DepositeAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Feature1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Feature6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("HourlyPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10,2)");

                    b.Property<TimeSpan>("OpeningHour")
                        .HasColumnType("time(0)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PlaygroundName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SurfaceType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PlaygroundId");

                    b.HasIndex("OwnerId");

                    b.ToTable("playGrounds");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlaygroundPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("playgroundPhotos");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlaygroundRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("CleanRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("ServiceRating")
                        .HasColumnType("int");

                    b.Property<int>("TimingRating")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("playgroundRatings");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlaygroundUnavailable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaygroundId")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaygroundId");

                    b.ToTable("playgroundUnavailables");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("CaptainId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TeamLogoURL")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("TeamId");

                    b.HasIndex("CaptainId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TournamentId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<string>("Prize")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentCity")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("TournamentId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.TournamentsTeam", b =>
                {
                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("TournamentId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TournamentsTeams");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Government")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdentifyVerified")
                        .HasColumnType("int");

                    b.Property<int>("IsOwner")
                        .HasColumnType("int");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Booking", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Player")
                        .WithMany("Bookings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.PlayGround", "Playground")
                        .WithMany("Bookings")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Playground");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.BookingParticipants", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Challenge", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.Team", "ChallengerTeam")
                        .WithMany("ChallengesAsChallenger")
                        .HasForeignKey("ChallengerTeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.Team", "OpponentTeam")
                        .WithMany("ChallengesAsOpponent")
                        .HasForeignKey("OpponentTeamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChallengerTeam");

                    b.Navigation("OpponentTeam");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Chat", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Recipient")
                        .WithMany("RecepientChats")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.User", "Sender")
                        .WithMany("SenderChats")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Media", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "User")
                        .WithMany("Media")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Notification", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.OwnerPaymentInfo", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Owner")
                        .WithMany("ownerPaymentInfos")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlayGround", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Owner")
                        .WithMany("PlayGrounds")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlaygroundPhoto", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.PlayGround", "PlayGround")
                        .WithMany("PlaygroundPhotos")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayGround");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlaygroundRating", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Player")
                        .WithMany("PlaygroundRatings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.PlayGround", "PlayGround")
                        .WithMany("PlaygroundRatings")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayGround");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlaygroundUnavailable", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.PlayGround", "PlayGround")
                        .WithMany("PlaygroundUnavailable")
                        .HasForeignKey("PlaygroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayGround");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Team", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Captain")
                        .WithMany()
                        .HasForeignKey("CaptainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("CurvaHagz.Models.App.TeamStats", "TeamStats", b1 =>
                        {
                            b1.Property<int>("TeamId")
                                .HasColumnType("int");

                            b1.Property<int>("Losses")
                                .HasColumnType("int");

                            b1.Property<int>("Wins")
                                .HasColumnType("int");

                            b1.HasKey("TeamId");

                            b1.ToTable("Teams");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.Navigation("Captain");

                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Tournament", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", "Organizer")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.TournamentsTeam", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.User", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CurvaHagz.Models.App.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CurvaHagz.Models.App.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurvaHagz.Models.App.PlayGround", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("PlaygroundPhotos");

                    b.Navigation("PlaygroundRatings");

                    b.Navigation("PlaygroundUnavailable");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.Team", b =>
                {
                    b.Navigation("ChallengesAsChallenger");

                    b.Navigation("ChallengesAsOpponent");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("CurvaHagz.Models.App.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Media");

                    b.Navigation("Notifications");

                    b.Navigation("PlayGrounds");

                    b.Navigation("PlaygroundRatings");

                    b.Navigation("RecepientChats");

                    b.Navigation("SenderChats");

                    b.Navigation("Tournaments");

                    b.Navigation("ownerPaymentInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
